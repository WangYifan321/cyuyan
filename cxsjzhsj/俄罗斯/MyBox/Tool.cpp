#include "stdafx.h"
#include "Tool.h"


//构造函数,本类没有使用动态分配，无需析构，类对象可直接复制、赋值。
Tool::Tool(int type)
{
	_type = type;
	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++)
			_data[i][j] = 0;
	switch (_type) {
	case 1:
		/*
		第1种形状的俄罗斯方块，按顺时针旋转90度4次，共有2种外观。
		□■□□ □□□□
		□■□□ □□□□
		□■□□ ■■■■
		□■□□ □□□□
		*/
		_data[1][0] = _data[1][1] = _data[1][2] = _data[1][3] = 1;
		break;
	case 2:
		/*
		第2种形状的俄罗斯方块，按顺时针旋转90度4次都是自身，只有1种外观。
		□□□□
		□■■□
		□■■□
		□□□□
		二维数组相应有方块的位置的元素设置为类型值2，其他位置元素为0*/
		_data[1][1] = _data[1][2] = _data[2][1] = _data[2][2] = 2;
		break;
	case 3:
		/*
		第3种形状的俄罗斯方块，按顺时针旋转90度4次，共有4种外观。
		□□□□ □□□□ □□■□ □□□□
		□■■□ ■■■□ □□■□ □■□□
		□■□□ □□■□ □■■□ □■■■
		□■□□ □□□□ □□□□ □□□□
		二维数组相应有方块的位置的元素设置为类型值3，其他位置元素为0 */
		_data[1][1] = _data[1][2] = _data[2][1] = _data[3][1] = 3;
		break;
	case 4:
		/*
		第4种形状的俄罗斯方块，按顺时针旋转90度4次，共有4种外观。
		□□□□ □■□□ □□□□ □□□□
		□■■□ □■■□ □□■■ □■□□
		■■□□ □□■□ □■■□ □■■□
		□□□□ □□□□ □□□□ □□■□
		二维数组相应有方块的位置的元素设置为类型值4，其他位置元素为0 */
		_data[1][0] = _data[1][1] = _data[2][1] = _data[3][1] = 4;
		break;
	case 5:
		/*
		第5种形状的俄罗斯方块，按顺时针旋转90度4次，共有4种外观。
		□□□□ □■□□ □□□□ □□□□
		□■□□ □■■□ □■■■ □□■□
		■■■□ □■□□ □□■□ □■■□
		□□□□ □□□□ □□□□ □□■□
		二维数组相应有方块的位置的元素设置为类型值5，其他位置元素为0 */
		_data[1][0] = _data[1][1] = _data[2][1] = _data[2][2] = 5;
		break;
	}
}

//获取小方块数值
const int & Tool::ElementAt(int i, int j) const {
	return _data[i][j];
}

//获取Tool的类型
const int Tool::GetType() const {
	return _type;
}

//返回顺时针旋转90度后俄罗斯方块
Tool Tool::Roll() {
	Tool toolRotated(*this);   //复制一个俄罗斯方块
	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++)
			toolRotated._data[i][j] = _data[3 - j][i];
	return toolRotated;
}


